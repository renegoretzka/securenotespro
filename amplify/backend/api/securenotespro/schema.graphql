type User
  @model(subscriptions: null)
  @key(name: "usersByCompany", fields: ["companyID"])
  @auth(
    rules: [
      { allow: owner, ownerField: "id", operations: [read, update] }
      { allow: groups, groupsField: "companyID", operations: [read] }
      { allow: private, provider: iam }
    ]
  ) {
  id: ID!
  name: String!
  companyID: ID
  company: Company @connection(fields: ["companyID"])
}

type Note
  @model(subscriptions: null)
  @key(
    name: "notesByCompany"
    fields: ["companyID", "updatedAt"]
    queryField: "getNotesByCompany"
  )
  @auth(
    rules: [
      { allow: owner, ownerField: "authorID" }
      { allow: groups, groupsField: "companyID", operations: [read] }
      { allow: private, provider: iam }
    ]
  ) {
  id: ID!
  content: String
  authorID: ID
  author: User @connection(fields: ["authorID"])
  companyID: ID!
  company: Company @connection(fields: ["companyID"])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Company
  @model
  @auth(
    rules: [
      { allow: groups, groupsField: "id" }
      { allow: private, provider: iam }
    ]
  ) {
  id: ID!
  name: String!
  notes: [Note] @connection(keyName: "notesByCompany", fields: ["id"])
  members: [User] @connection(keyName: "usersByCompany", fields: ["id"])
}

type Subscription {
  newNote(companyID: ID!): Note @aws_subscribe(mutations: ["createNote"])
  updatedNote(companyID: ID!): Note @aws_subscribe(mutations: ["updateNote"])
  deletedNote(companyID: ID!): Note @aws_subscribe(mutations: ["deleteNote"])
}
